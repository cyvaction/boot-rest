buildscript {
    repositories {
        maven { url 'http://repo.spring.io/libs-snapshot' }
        mavenLocal()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.0.1.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

ext {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    baseName = 'boot-rest'
    version = '0.1.0'
}

jar {
    archiveName = "${baseName}.jar"
}

// Toggle to enable building WAR
// -----------------------------
def buildWar = false
//def buildWar = true
//apply plugin: 'war'
//war {
//    archiveName = "${baseName}.war"
//}
// -----------------------------

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/libs-snapshot' }
}

// Versions
// ========
// Core
def springBootVersion = '1.0.2.RELEASE'
def springDataEsVersion = '1.0.0.BUILD-SNAPSHOT'
def thymeleafVersion = '2.1.2.RELEASE'
def hibernateValidatorVersion = '5.1.0.Final'
def servletApiVersion = '3.1.0'
def jettyVersion = '9.1.4.v20140401'
def springHk2BridgeVersion = '2.2.0'
def jerseyVersion = '2.7'
def apacheHttpClientVersion = '4.3.3'
def jacksonVersion = '2.3.2'
def swaggerVersion = '1.3.4'

// Utilities
def lombokVersion = '1.12.6'
def guavaVersion = '17.0'
def groovyVersion = '2.2.2'
def yamlVersion = '1.13'

// Testing
def junitVersion = '4.11'
def festAssertVersion = '1.4'
def mockitoVersion = '1.9.5'
def objenesisVersion = '2.1'

dependencies {
    // Core
    // ====
    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    if (!buildWar) {
        compile "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"
    }
    compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion") {
        exclude module: 'hsqldb'
    }
    // Spring Data Elasticsearch
    compile "org.springframework.data:spring-data-elasticsearch:$springDataEsVersion"
    // Thymeleaf Templating
    compile "org.thymeleaf:thymeleaf-spring4:$thymeleafVersion"
    // Bean Validation
    compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
    // Servlet API
    compile "javax.servlet:javax.servlet-api:$servletApiVersion"
    // Jetty Server
    compile "org.eclipse.jetty:jetty-servlets:$jettyVersion"
    if (!buildWar) {
        compile "org.eclipse.jetty:jetty-client:$jettyVersion"
        compile "org.eclipse.jetty:jetty-continuation:$jettyVersion"
        compile "org.eclipse.jetty:jetty-http:$jettyVersion"
        compile "org.eclipse.jetty:jetty-io:$jettyVersion"
        compile "org.eclipse.jetty:jetty-jsp:$jettyVersion"
        compile "org.eclipse.jetty:jetty-security:$jettyVersion"
        compile "org.eclipse.jetty:jetty-server:$jettyVersion"
        compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
        compile "org.eclipse.jetty:jetty-util:$jettyVersion"
        compile "org.eclipse.jetty:jetty-webapp:$jettyVersion"
        compile "org.eclipse.jetty:jetty-xml:$jettyVersion"
    }
    // Jersey REST
    compile "org.glassfish.hk2:spring-bridge:$springHk2BridgeVersion"
    compile("org.glassfish.jersey.core:jersey-common:$jerseyVersion") {
        exclude module: 'guava'
    }
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    // Apache HTTP Client
    compile "org.glassfish.jersey.connectors:jersey-apache-connector:$jerseyVersion"
    compile "org.apache.httpcomponents:httpclient:$apacheHttpClientVersion"
    // Jackson JSON
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    // Swagger Docs
    compile("com.wordnik:swagger-jaxrs_2.10:$swaggerVersion") {
        exclude module: 'jsr311-api'
        exclude module: 'scala-compiler'
    }

    // Utilities
    // =========
    compile "org.projectlombok:lombok:$lombokVersion"
    compile "com.google.guava:guava:$guavaVersion"
    runtime "org.codehaus.groovy:groovy-all:$groovyVersion"
    runtime "org.yaml:snakeyaml:$yamlVersion"

    // Testing
    // =======
    testCompile "junit:junit:$junitVersion"
    testCompile "org.easytesting:fest-assert:$festAssertVersion"
    testCompile("org.mockito:mockito-core:$mockitoVersion") {
        exclude module: 'objenesis'
    }
    testCompile "org.objenesis:objenesis:$objenesisVersion"
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

def webappDevDir = 'src/main/webapp-dev'

task npmInstall(type: Exec) {
    workingDir webappDevDir
    commandLine 'npm', 'install'
}

task bowerInstall(type: Exec) {
    workingDir webappDevDir
    commandLine 'bower', 'install'
}

task gruntBuild(type: Exec) {
    workingDir webappDevDir
    commandLine 'grunt', '--force'
}

bowerInstall.dependsOn npmInstall
gruntBuild.dependsOn bowerInstall
build.dependsOn gruntBuild

// Used by Heroku
task stage(dependsOn: ['processResources', 'classes', 'jar', 'bootRepackage', 'assemble'])
