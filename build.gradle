buildscript {
    ext {
        springBootVersion = '1.1.8.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

ext {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    baseName = 'boot-rest'
    archiveName = "${baseName}.jar"
    version = new File('src/main/resources/version.txt').text.trim()
}

// Toggle to enable building WAR
// -----------------------------
def buildWar = false
//def buildWar = true
//apply plugin: 'war'
//war {
//    archiveName = "${baseName}.war"
//}
// -----------------------------

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
}

// Versions
// ========
// Core
def springDataEsVersion = '1.1.1.RELEASE'
def hibernateValidatorVersion = '5.1.3.Final'
def servletApiVersion = '3.1.0'
def jettyVersion = '9.2.3.v20140905'
def springHk2BridgeVersion = '2.3.0'
def jerseyVersion = '2.13'
def jacksonVersion = '2.4.3'
def swaggerVersion = '1.3.6'
def metricsVersion = '3.0.2'

// Utilities
def lombokVersion = '1.14.8'
def guavaVersion = '18.0'

// Testing
def festAssertVersion = '1.4'

dependencies {
    // Core
    // ====
    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter-web") { exclude module: 'spring-boot-starter-tomcat' }
    if (!buildWar) {
        compile "org.springframework.boot:spring-boot-starter-jetty"
    }
    compile "org.springframework.boot:spring-boot-starter-security"
    compile("org.springframework.boot:spring-boot-starter-actuator") { exclude module: 'hsqldb' }
    // Spring Data Elasticsearch
    compile "org.springframework.data:spring-data-elasticsearch:$springDataEsVersion"
    // Thymeleaf Templating
    compile "org.thymeleaf:thymeleaf-spring4"
    // Bean Validation
    compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
    // Jetty Server
    compile "org.eclipse.jetty:jetty-servlets:$jettyVersion"
    if (!buildWar) {
        compile "org.eclipse.jetty:jetty-client:$jettyVersion"
        compile "org.eclipse.jetty:jetty-continuation:$jettyVersion"
        compile "org.eclipse.jetty:jetty-http:$jettyVersion"
        compile "org.eclipse.jetty:jetty-io:$jettyVersion"
        compile "org.eclipse.jetty:jetty-jsp:$jettyVersion"
        compile "org.eclipse.jetty:jetty-security:$jettyVersion"
        compile "org.eclipse.jetty:jetty-server:$jettyVersion"
        compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
        compile "org.eclipse.jetty:jetty-util:$jettyVersion"
        compile "org.eclipse.jetty:jetty-webapp:$jettyVersion"
        compile "org.eclipse.jetty:jetty-xml:$jettyVersion"
        // Servlet API
        compile "javax.servlet:javax.servlet-api:$servletApiVersion"
    }
    // JAX-RS REST
    compile "org.glassfish.hk2:spring-bridge:$springHk2BridgeVersion"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.ext:jersey-bean-validation:$jerseyVersion"
    // Apache HTTP Client
    compile "org.glassfish.jersey.connectors:jersey-apache-connector:$jerseyVersion"
    // Jackson JSON
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    // Swagger Docs
    compile("com.wordnik:swagger-jaxrs_2.10:$swaggerVersion") {
        exclude module: 'jsr311-api'
        exclude module: 'scala-compiler'
    }
    // Coda Hale Metrics
    compile "com.codahale.metrics:metrics-core:$metricsVersion"

    // Utilities
    // =========
    compile "org.projectlombok:lombok:$lombokVersion"
    compile "com.google.guava:guava:$guavaVersion"

    // Testing
    // =======
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.easytesting:fest-assert:$festAssertVersion"
}

// Tasks
// =====
task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

def webappDevDir = 'src/main/webapp-dev'

task npmInstall(type: Exec) {
    workingDir webappDevDir
    commandLine 'npm', 'install'
}

task bowerInstall(type: Exec) {
    workingDir webappDevDir
    commandLine 'bower', 'install'
}

task gulpBuild(type: Exec) {
    workingDir webappDevDir
    commandLine 'gulp'
}

task gulpWatch(type: Exec) {
    workingDir webappDevDir
    commandLine 'gulp', 'watch'
}

task copyJar(type: Exec) {
    workingDir 'build/libs'
    commandLine 'cp', jar.archiveName, '../../bin'
}

bowerInstall.dependsOn npmInstall
gulpBuild.dependsOn bowerInstall
build.dependsOn gulpBuild

task dist(dependsOn: ['build', 'copyJar'])

// Used by Heroku
task stage(dependsOn: ['processResources', 'classes', 'jar', 'bootRepackage', 'assemble'])
